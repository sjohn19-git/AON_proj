#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Thu Jun 20 18:43:27 2024@author: sebinjohn"""import os os.chdir("/Users/sebinjohn/AON_PROJECT/Data/codes")import pandas as pdfrom obspy import UTCDateTimeimport numpy as npimport picklefrom medfilt import medfiltimport matplotlib.dates as mdatesimport matplotlib.pyplot as pltimport matplotlib.gridspec as gridspecimport matplotlib.colors as clfrom matplotlib.ticker import MultipleLocator from matplotlib.patches import Rectangle as rec#loading station metadataos.chdir("/Users/sebinjohn/AON_PROJECT/Data/Video Making")with open("metadta.pkl","rb") as f:   long,lat,stationo ,env = pickle.load(f)    datapath="/Users/sebinjohn/AON_PROJECT/Data/*/"sta="K13K"os.chdir(r"/Users/sebinjohn/AON_PROJECT/Data/"+sta)#loading PSD for station K13Kwith open((str(sta)+".pkl"),"rb") as f:    sta, starttimeta, endtimeta,starttimeak,endtimeak,sta,cha,loc=pickle.load(f)   time_frame=np.arange(starttimeta,endtimeak,3600)       with open("final_"+sta+".npy", 'rb') as g:    final=np.load(g)freq=[]name= pd.read_xml("/Users/sebinjohn/AON_PROJECT/Data/Video Making/pdf0.xml", xpath="/PsdRoot/Psds[1]/Psd[1]/value[@freq]")for i in range (95):    freq.append(name.iloc[i]['freq'])freq.append(np.float64(19.74030))def mean(res):    su=0    for i in range(len(res)):        su+=res[i]    mea=su/len(res)    return mea    mean_power=np.array([])#calculateing mean SMfor j in range(len(time_frame)):    res=final[34:43,j]    out_mean=mean(res)    mean_power=np.append(mean_power,out_mean)#interpolationinterp_inde=np.array([])interpolated_x=medfilt(mean_power,7).copy()interp_x=medfilt(mean_power,7).copy()datagap=np.where(interp_x==0)[0]data_x=np.where(interp_x!=0)[0]for i in range(len(data_x)-1):    if data_x[i+1]-data_x[i]<12 and data_x[i+1]-data_x[i]>1:        interp_inde=np.append(interp_inde,np.array( [i for i in range(int(data_x[i])+1,int(data_x[i+1]))]))    else:        continueif len(interp_inde)>1:    interp=np.interp(interp_inde, data_x.reshape(np.shape(data_x)[0]), interp_x[data_x].reshape(np.shape(data_x)[0]))    interp_inde=(interp_inde+1).astype("int32")    interpolated_x[interp_inde]=interpinterpol=interpolated_x.copy()interpol[interpol==0]=np.nanmean_power[mean_power==0]=np.nanfint_frames=np.arange(starttimeta,endtimeak,3600)time_framem=[]#preparing time_frames for plotting purposefor ele in time_frame:    time_framem.append(ele)for i in range(len(fint_frames)):    fint_frames[i]=mdates.date2num(fint_frames[i])date_format=mdates.DateFormatter('%b') date_format1=mdates.DateFormatter('%m/%d/%yT%H')date_formatdef sr(x):    normal = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-=()"    super_s = "ᴬᴮᶜᴰᴱᶠᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾQᴿˢᵀᵁⱽᵂˣʸᶻᵃᵇᶜᵈᵉᶠᵍʰᶦʲᵏˡᵐⁿᵒᵖ۹ʳˢᵗᵘᵛʷˣʸᶻ⁰¹²³⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾"    res = x.maketrans(''.join(normal), ''.join(super_s))    return x.translate(res)xmin,xmax=mdates.date2num(UTCDateTime(2019,1,1)),mdates.date2num(UTCDateTime(2019,12,31))lwd=1cmap = plt.get_cmap('nipy_spectral').copy()sta="K13K"fint_frames=np.arange(starttimeta,endtimeak,3600)for i in range(len(fint_frames)):    fint_frames[i]=mdates.date2num(fint_frames[i])   xlmi=xminxlma=xmaxfig = plt.figure(dpi=600)fig.set_figheight(6.5)fig.set_figwidth(7.5)spec = gridspec.GridSpec(nrows=3,ncols=2,hspace=0.1, height_ratios=[1,1,1],width_ratios=[10,1],wspace=-0.005)ax3=fig.add_subplot(spec[2,0])ax2=fig.add_subplot(spec[1,0])cmap = plt.get_cmap('nipy_spectral').copy()cmap.set_over(color = 'w')ax1 = fig.add_subplot(spec[0,0])c = ax1.pcolormesh(fint_frames.astype(np.float64),np.array(freq,dtype='float64'),final,cmap=cmap,vmin=-195,vmax=-95,shading='auto',rasterized=True)rect = rec((xmin,0.1),xmax-xmin,0.1,facecolor='darkorange',alpha=0.65)ax1.add_patch(rect)# ax1.axhline(y=0.1,c="r",linestyle="--")# ax1.axhline(y=0.2,c="r",linestyle="--")ax1.axhline(y=0.1,c="k",linestyle="--",lw=0.5)ax1.axhline(y=0.2,c="k",linestyle="--",lw=0.5)nom=cl.Normalize(vmin=-195,vmax=-95)ax1.xaxis.set_major_locator(mdates.MonthLocator(1))ax1.set_xticks([])ax1.set_ylabel("Frequency(Hz)",fontsize=10,labelpad=10)ax1.set_xlim([xmin,xmax])ax1.set_facecolor(color=None)ax1.set_yscale('log')ax1.title.set_text(sta+"_"+cha+" "+str(UTCDateTime((mdates.num2date(xmin)).strftime('%Y-%m-%d')))[0:10]+" - "+str(UTCDateTime((mdates.num2date(xmax)).strftime('%Y-%m-%d')))[0:10])ax0 = fig.add_subplot(spec[0,1])#ax0.axis('off')norm=np.arange(-95,-195,-0.1).reshape(1000,1)cbar1=np.ones((1000, 100))cbar=cbar1*normax0.imshow(cbar, extent=[0, 10, -195, -95],cmap=cmap,vmin=-195,vmax=-95)ax0.yaxis.set_label_position("right")ax0.yaxis.set_ticks_position('right')ax0.set_xlabel('dB')ax0.set_xticks([])ax0.set_xticklabels([])ax0.tick_params(axis='y', labelsize=8)ax2.plot(fint_frames,mean_power,c="darkorange",label="SM (5-10s)",lw=lwd)ax2.xaxis.set_major_formatter(date_format)ax2.set_ylabel('dB(rel. 1 (m/s'+sr('2')+')'+sr('2')+'/Hz',fontsize=10)ax2.yaxis.set_label_coords(-0.10, 0.10)ax2.tick_params(axis='y', labelsize=10)ax3.tick_params(axis='y', labelsize=10)ax2.tick_params(axis='x', labelsize=10)ax3.tick_params(axis='x', labelsize=10)ax2.set_xlim([xmin,xmax])ax2.xaxis.set_major_locator(mdates.MonthLocator(bymonthday=1))leg=ax2.legend(loc="best",frameon=True,fontsize=10,handletextpad=0.5)#ax2.xaxis.set_major_locator(mdates.MonthLocator())#ax2.set_xticks([])y_tick_interval = 20  # Adjust the interval as neededax2.yaxis.set_major_locator(MultipleLocator(base=y_tick_interval))ax3.yaxis.set_major_locator(MultipleLocator(base=y_tick_interval))ax3.plot(fint_frames,interpol,c="darkorange",label="SM (5-10s) after processing",lw=lwd)ax3.xaxis.set_major_formatter(date_format)ax3.xaxis.set_major_locator(mdates.MonthLocator(bymonthday=1))leg1=ax3.legend(loc="best",frameon=True,fontsize=10,handletextpad=0.5)ax3.set_xlim([xmin,xmax])ax3.set_ylim([-150,-100])ax2.set_ylim([-150,-100])ax2.set_xticks([])for text in leg.get_texts():    text.set_fontstyle('italic')for text in leg1.get_texts():    text.set_fontstyle('italic')fig.savefig('/Users/sebinjohn/Downloads/workflow.svg',transparent=True)